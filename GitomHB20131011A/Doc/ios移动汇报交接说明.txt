一，运行项目注意事项:
   项目采用手动管理内存的方式，视图大部分采用代码方式生成.(可以根据个人习惯来改变)
   项目中包含了百度地图SDK，百度地图SDK中有两个.a文件 Release-iphoneos\libbaidumapapi.a和Release-iphonesimulator/libbaidumapapi.a,一个用于真机，一个用于模拟器，只能用一个！但是SVN不能上传.a文件，所以我改成.h文件和.m文件了。  每次更新下来的数据，要用的时候，要把相应的文件改成.a文件，不然会报错，要上传的时候，再改成.h还是.m文件就行了（当然也可以把.a文件合成，并用命令行的方式，把.a文件上传到svn服务器上！）。
    Lib/BaiduMap_iOSSDK_v2.0.1_Lib/libs/Release-iphoneos/libbaidumapapi.h真机测试时候将.h更改为.a
    
二，项目文件结构说明:
1.项目中各个文件夹对应各个类型的文件：
     DOC文件夹放的是一些文档说明
     Controller文件夹对应的VewController或者是Controller
     Lib文件夹放着别人的类库等
     Manager放业务逻辑操作类
     Model放的是实体
     Res放的是资源，如图片声音等的
     Service放的是数据访问类
     View放的是视图类

三，每个业务的实现方式
  项目实现采用MVC模式、三层架构设计。。  这也是一个良好的习惯。
  控制器一般集成视图（如果要考虑ipad或者分辨率适配的话，最好是把视图也分离出controller），每个控制器调用manager（业务处理类），manager对service（数据访问）进行封装，这样分离结构比较清晰，也方便修改和拓展。
  例子，登录的时候controller调用manager方法 ：
	//用户网络登录
	typedef void(^WbLoggedInfo)(UserLoggedInfo * loggedInfo,BOOL isLoggedOk);
	-(void)loggingWithLoggingInfo:(UserLoggingInfo *)loggingInfo
           WbLoggedInfo:(WbLoggedInfo)callback;
	就行，而不是在按钮事件里面直接实现登录的具体方法(网络数据读取等的)。


四，数据访问的请求，和服务器、安卓那边一样，把方法都写在HBServerKit类里面了。每一个页面想要做哪个功能模块，就在对应的业务管理类里面，调用HBServerKit的方法，达到分层管理的目的。

五，Model的设计
   项目设计的时候，考虑到IOS没有像JAVA的ORM框架，所以用我自己写的几个类来实现类似的功能。 
   每一个model都对应着几个方法，这几个方法在WBaseModelProtocol.h协议里面有定义！

   主要思想：
     JSON数据保存成model的方法是： JSON-->DIC/Array-->Model
     Model生成JSON数据的方法：model-->DIC-->JSON 
   以这样的方法，就可以实现对JSON数据与Model的转化，不要用到运行时，也能把json与model相互转化，只是要对model写挺多东西，而且不能写错。 

六、服务器接口方面
    服务器接口方面与小柯协商，需要什么数据就查小柯获取，如登录的时候，需要一个用户所在公司的公司名，可以让服务器端在登录成功的时候，返回一个公司名。
    服务器返回的数据都有两个对象，分别是head和body。。    head是异常信息，body是具体数据。。  对这些判断，参考HBServerKit类最后的几个方法。

七，其他
   1. 我把一些常用的数据放在CommonDataModel类中，在AppDelegate类里面有一个常用数据的属性comData，每次得到的常用数据都放在这个属性里面，每次要用的时候，就直接到appdelegate里面的comData里面找就行了！

   2.目前完成的功能有：用户登录，用户头像获取，用户汇报，用户汇报记录查询等

   3.接下去的功能，只要按着三层架构的模式，就能很快的完成（网络数据访问模式），对于后期的优化，可以采用一些缓存！

   4.如看不明白，随时联系，QQ10126121 手机18965515320。。

   5.SVN服务器上有几个版本，分别是之前做的逻辑操作全在手机上的版本，一些东西还是可以拿过来用的，比如某些界面。